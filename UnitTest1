using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace UnitTestProject1
{
    [TestClass]
    public class UnitTest1
    {
        [TestMethod]
        public void TestForAddInt()
        {
            Square_Matrix matrix1 = new  Square_Matrix(10);
            matrix1.SetOneValue(1);
            Square_Matrix matrix2 = new Square_Matrix(10);
            matrix2.SetOneValue(2);
            Square_Matrix matrix3 = new Square_Matrix(10);
           matrix3.SetOneValue(3);
            string actual = (Square_Matrix.Add(matrix1, matrix2).ToString());
            string expected = matrix3.ToString();
            Assert.AreEqual(expected, actual);
        }
      
        [TestMethod]
        public void TestForAddDouble()
        {
            Square_Matrix matrix1 = new Square_Matrix(10);
            matrix1.SetOneValue(1.1);
            Square_Matrix matrix2 = new Square_Matrix(10);
           
            matrix2.SetOneValue(2.3);
            Square_Matrix matrix3 = new Square_Matrix(10);
            
            matrix3.SetOneValue(3.4);
            string actual = (Square_Matrix.Add(matrix1, matrix2).ToString());
            string expected = matrix3.ToString();
            Assert.AreEqual(expected, actual);
        }
        [TestMethod]
        public void TestForMultiply()
        {
            Square_Matrix matrix1 = new Square_Matrix(10);
            
            matrix1.SetOneValue(0);
            Square_Matrix matrix2 = new Square_Matrix(10);
           
            matrix2.SetOneValue(1);
            Square_Matrix matrix3 = new Square_Matrix(10);
           
            matrix3.SetOneValue(0);
            string actual = (Square_Matrix.Multiply(matrix1, matrix2).ToString());
            string expected = matrix3.ToString();
            Assert.AreEqual(expected, actual);
        }
        [TestMethod]
        public void TestForInvert()
        {
            Square_Matrix matrix1 = new Square_Matrix(10);
           
            for (int i = 0; i < matrix1.Get_size(); i++)
            {
                for (int j = 0; j < matrix1.Get_size(); j++)
                {
                    matrix1.Set_element(i, j, i);
                }
            }
            Square_Matrix matrix2 = new Square_Matrix(10);
            for (int i = 0; i < matrix2.Get_size(); i++)
            {
                for (int j = 0; j < matrix2.Get_size(); j++)
                {
                    matrix2.Set_element(i, j, j);
                }
            }
            matrix1.Invert();
            string actual = matrix1.ToString();
            string expected = matrix2.ToString();
            Assert.AreEqual(expected, actual);
        }
    }
        
}
